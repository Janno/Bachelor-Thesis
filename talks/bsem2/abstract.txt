We aim to develop an elegant formalization of regular languages in Coq (Ssreflect). To this end, we first first established a mapping from regular expressions to finite automata and proved its correctness. To complete the proof of equivalence of regular expressions and finite automata, the next step is to map finite automata back to regular expressions. So far this appears to be comparatively complex. In contrast to the mapping from regular expressions to finite automata, where we can make use of the inductive definition of regular expressions to build equivalent, non-inductive finite automata, we now have to build regular expressions from our non-inductive type of finite automata. In this talk, we will give an overview of the different algorithms used to construct regular expressions from finite automata. We will discuss their respective properties and the difficulties in formalizing them. Finally, we will present our current approach to this challenge.


Regular languages are well studied and research on this topic spans over half a century. Recent publications presented formalizations of equivalence testing on regular expressions (2011, Coquand et al. in Coq; 2011 Krauss et al. in Isabelle, 2011 Moreira in Coq), and the Myhill-Nerode theorem (2011, Xu et al. in Isabelle; 1997, Constable in Nuprl). Following this recent interest in formalizing regular languages, we aim to provide an elegant formalization in Coq (Ssreflect) based on finite automata. We want to show equivalence of three characterizations of regular languages: finite automata, regular expressions and the Myhill-Nerode theorem. While current work in this field mostly focuses on regular derivatives (Coquand, Xu, Krauss, Moreira), we want to employ finite automata for both equivalence testing and the Myhill-Nerode theorem.
